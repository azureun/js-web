# 05-01 여러 동작을 묶은 덩어리, 함수
<함수 선언과 실행 순서>
javascript는 소스를 해석할 때 함수 선언 부분을 가장 먼저 해석한다.
-> 함수 선언 위치는 프로그램 흐름의 영향을 주지 않는다.
-> 함수 호출을 함수 선언 소스 앞에 작성해도 작동한다.

================================================================================
# 05-02 여러 번 사용할 수 있는 함수 만들기
> 1분 복습 : 'addNumber(num1, num2) 함수 실행 소스는 함수 선언 소스보다 앞에 와야 합니다.' 맞으면 o, 틀리면 x
        답 : x, 함수 선언 앞이나 뒤, 어디에 놓여도 됩니다.
----------------------------------------
<[ES6] 함수의 매개변수 기본 값 지정하기>
> 예시
function multiple(a, b = 5, c = 10) {
    return a * b + c;   //b = 10, c = 20로 기본 값 지정
}
multiple(5, 10, 20);    //a=5, b=10, c=20 #결과 : 70
multiple(10, 20);       //a=10, b=20, c=10
multiple(30);           //a=30, b=5, c=10

----------------------------------------
<익명 함수>
- 이름이 없는 함수.
- 함수 만들 때 function add(a, b)가 아니라 
ex) var add = function(a, b) 이렇게 나타낸다.

<즉시 실행 함수>
- 함수를 정의함과 동시에 실행하는 함수.
- 함수 선언 소스 전체를 괄호로 묶는다. 그리고 소스를 닫는 괄호 앞/뒤에 인수가 들어갈 괄호를 넣는다.
- 즉시 실행 함수는 식이기 때문에 소스 끝에 ;을 붙여 준다.
ex)
(function() {
        ...
})();

(function() {
    ...
}());
---
(function(){})();
(function(){}());
---

<함수의 화살표 표기법 예시들>
ex1)
**기존 함수 표기법**
var hi = function(){
    return "안녕하세요?";
}
hi();   //함수 호출

**화살표 표기법**
let hi = () => "안녕하세요?";
hi();   //함수 호출

ex2)
**기존 함수 표기법**
var greet = function(name) {
    return name + "님, 안녕하세요?";
}
greet("경희");  //매개변수 name은 "경희"

**화살표 표기법**
let greet = name => '${name}님, 안녕하세요?';
greet("경희");

ex3)
**기존 함수 표기법**
var add = function(a, b){
    return a + b;
}

add(10, 20);    //함수 실행행

**화살표 표기법**
let add = (a, b) => a + b;

add(10, 20);    //함수 실행

================================================================================
# 05-03 이벤트 다루기

<주요 이벤트>
1. 마우스 이벤트 : 마우스에서 버튼/휠 버튼 조작 시 발생
- click : 사용자가 HTML 요소를 마우스로 눌렀을 때 이벤트 발생
- dblclick : 사용자가 HTML 요소를 마우스로 두 번 눌렀을 때 이벤트 발생
- mousedown : 사용자가 요소 위에서 마우스 버튼을 누르는 동안 이벤트 발생
- mousemove : 사용자가 요소 위에서 마우스 포인터를 움직일 때 이벤트 발생
- mouseover : 마우스 포인터가 요소 위로 옮겨질 때 이벤트 발생
- mouseout : 마우스 포인터가 요소를 벗어날 때 이벤트 발생
- mouseup : 사용자가 누루고 있던 마우스 버튼에서 손을 뗄 때 이벤트 발생

2. 키보드 이벤트 : 키보드 특정 키 조작 시 발생
- keypress : 사용자가 키를 눌렀을 때 이벤트 발생
- keydown : 사용자가 키를 누르는 동안 이벤트 발생
- keyup : 사용자가 키에서 손을 뗄 때 이벤트 발생

3. 문서 로딩 이벤트 : 서버에서 웹 문서를 가져오거나 위아래로 스크롤하는 등. 웹 문서를 브라우저 창에 보여주는 것과 관련됨.
- abort : 웹 문서가 완전히 로디오디기 전에 불러오기를 멈췄을 때 이벤트 발생
- error : 문서가 정확히 로딩되지 않았을 때 이벤트 발생
- load : 문서 로딩이 끝나면 이벤트가 발생
- resize : 문서 화면 크기가 바뀌었을 때 이벤트 발생
- scroll : 문서 화면이 스크롤되었을 때 이벤트 발생
- unload : 문서를 벋어날 때 이벤트 발생

4. 폼(Form) 이벤트 : 사용자가 정보를 입력하는 모든 요소를 가리킴.(ex.로그인/검색/게시판/설문 조사)
- blur : 폼 요소에 포커스를 잃었을 때 이벤트 발생
- change : 목록/체크 상태 등이 변경되었을 때 이벤트 발생
            (<input>, <select>, <textarea> 태그에서 사용.)
- focus : 폼 요소에 포커스가 놓였을 때 이벤트 발생
            (<label>, <select>, <textarea>, <button> 태그에서 사용.)
- reset : 폼이 다시 시작되었을 때 이벤트 발생
- submit : submit 버튼을 눌렀을 때 이벤트 발생.

<이벤트 처리기(=Event Handler)>
- 이벤트 발생 시, 연결 동작이 뒤따름.
- 이벤트와 이벤트 처리 함수를 연결해주는 역할.
- 이벤트 이름 앞에 'on'을 붙여 사용. (ex. onmouseover, onclick)
- onclick 다음에 있는 실행 명령/함수를 연결함.

================================================================================
# 연습 문제
01. 알림 창을 띄우는 함수의 이름은 alert 입니다.
02. 함수를 선언할 때는 function 예약어를 사용합니다.
03. 함수 실행을 함수 선언보다 먼저 할 경우 함수가 실행됩니다.
04. 함수를 선언할 때 실행에 필요한 값을 괄호 안에 지정하는 것을 매개변수라고 합니다.
05. 전체 소스 중 변수를 선언한 함수 안에서만 사용할 수 있는 변수를 지역 변수라고 합니다.
06. 지역 변수를 선언할 때는 var 예약어를 사용합니다.
07. 이름이 없는 함수를 익명 함수라고 부릅니다.
08. 함수에서 실행한 결괏값을 반환할 때 return문을 사용합니다.
09. 이벤트란 웹 브라우저나 사용자가 행하는 어떤 동작을 말합니다.
10. 사용자가 HTML 요소를 마우스로 누르면 click 이벤트가 발생합니다.

Q1. 매개변수 2개를 받아 두 값이 같다면 두 변수를 곱하고, 값이 같지 않다면 두수를 더하는 함수를 sumMulti 작성.
그리고 값 5와 10을 sumMulti 함수로 넘겨 실행하는 것 vs 10과 10을 sumMulti 함수로 넘겨 실행했을 때 결괏값을 콘솔 창에 표시하세요.

Q2. 프롬프트 창에서 두 숫자를 입력받은 후 그 값을 넘겨주면 두 숫자 크기를 비교해
더 큰 숫자를 알림창에 표시하는 함수를 작성하고 실행하세요.
